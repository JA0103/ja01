<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- <bean id="tv" class="polymohism.SamsungTV" 
	init-method="initMethod" destroy-method="destroyMethod" lazy-init="true" scope="prototype"/> -->
	
	
	<!-- <bean id="tv" class="polymohism.SamsungTV" lazy-init="true">
		<constructor-arg ref="sony"></constructor-arg>
		<constructor-arg value="2700.35" type="double"></constructor-arg>
	</bean> -->
	
<!-- 	
	
	<bean id="tv" class="polymohism.SamsungTV" lazy-init="true"
		p:speaker-ref="sony" p:price="250">
	</bean>
	
	<bean id="tv2" class="polymohism.LgTV" lazy-init="true">
		<constructor-arg ref="apple"></constructor-arg>
		<constructor-arg value="500" type="int"></constructor-arg>
	</bean>
	
	<bean id="sony" class="polymohism.SonySpeaker" lazy-init="true"/>
	ref="sony":의존성관계로 이게 있어야 10번이 있을 수 있어서 이게 먼저 생성 된 후 10번 생성됨.
	<bean id="apple" class="polymohism.AppleSpeaker" lazy-init="true"/>
	
	 -->
	 
	 
<!-- 	 
	 
	<bean id="CollectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행당동</value>
			</list>
		</property>
		
		<property name="addressSet">
			<set value-type="java.lang.String">
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 성수동</value>
				<value>서울시 성동구 성수동</value>
			</set>
		</property>
		
	<property name="addressMap">
		<map>
			<entry>
				<key><value>고길동</value></key>
				<value>서울시 강남구 역삼동</value>
			</entry>
			<entry key="마이콜" value="서울시 강서구 화곡동"/>
		</map>
	</property>
	
	<property name="addressPro">
		<props>
			<prop key="고길동">서울시 강남구 역삼동</prop>
			<prop key="마이콜">서울시 강서구 화곡동</prop>
		</props>
	</property>
	
	
	</bean>	 
	 

	  -->
	
	<!--  
	 <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
	 	<property name="userDAO" ref="userDAO"/>
	 </bean>
	 
	 <bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"/>
	 
	  -->
	  
	 <!-- 
	  <bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean>
	  <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"></bean>
	  <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
	  <bean id="afterAdvice" class="com.springbook.biz.common.AfterAdvice"></bean>
	  <bean id="around" class="com.springbook.biz.common.AroundAdvice"></bean>
	  <bean id="beforeAdvice" class="com.springbook.biz.common.BeforeAdvice"></bean>
	  
	  
	  <aop:config>
	  	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" 
	  	id="allPointCut"/>
	  	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" 
	  	id="getPointCut"/>
	  	
	  	
	  	<aop:aspect ref="afterThrowing">
	  		<aop:after-throwing method="exceptionLog" pointcut-ref="allPointCut"
	  			throwing="exceptObj"/>
	  	</aop:aspect>
	  
	  
	  	 
	  	<aop:aspect ref="afterReturning">
	  		<aop:after-returning method="afterLog" pointcut-ref="getPointCut"
	  			returning="returnObj"/>
	  	</aop:aspect>
	  	
	  	<aop:aspect ref="beforeAdvice">
	  		<aop:before method="beforeLog" pointcut-ref="allPointCut"/>
	  	</aop:aspect>
	  	
		<aop:aspect ref="afterAdvice">
			<aop:after method="finallyLog" pointcut-ref="allPointCut"/>
		</aop:aspect>
		 
	
		<aop:aspect ref="around">
			<aop:around method="aroundLog" pointcut-ref="allPointCut"/>
		</aop:aspect>
	

	  </aop:config>
	 -->
	 
	 
	 
	  
	 <context:component-scan base-package="com.springbook.biz">
	 </context:component-scan>
	
	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath:config/database.properties"/>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		
	</bean>
	 
	<!-- spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	 
	 
	 <!-- 트랜잭션 -->
	 <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<property name="dataSource" ref="dataSource"></property>
	 </bean>
	 
	 <tx:advice id="txAdvice" transaction-manager="txManager">
	 	<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>	 	
	 	</tx:attributes>
	 </tx:advice>
	 
	 <aop:config>
	 	<aop:pointcut expression="execution(* com.springbook.biz..*(..))" 
	 		id="txPointcut"/>
	 		
	 	<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	 </aop:config>
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
</beans>
